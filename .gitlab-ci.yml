stages:
  - prepare
  - test
  - build
  - deploy

image: php:7.4

.dependencies_cache:
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - vendor/
    policy: pull

composer:
  stage: prepare
  extends: .dependencies_cache
  cache:
    policy: pull-push
  before_script:
    - |
      set -xe
      apt-get update -yqq && apt-get install git wget zip unzip libpng-dev zlib1g-dev libzip-dev curl -yqq
      docker-php-ext-install gd zip
      curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  script:
    - composer install --optimize-autoloader

unit-test:
  stage: test
  extends: .dependencies_cache
  environment:
    name: staging
  services:
    - mysql:latest
    - redis:latest
  variables:
    MYSQL_DATABASE: $MYSQL_DATABASE
    MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
    REDIS_PORT: 6379
    REDIS_HOST: "redis"
    GOOGLE_MAPS_API_KEY: $GOOGLE_MAPS_API_KEY
  cache:
    policy: pull
  allow_failure: true
  before_script:
    - |
      set -xe
      pecl install -o -f redis
      rm -rf /tmp/pear
      apt-get update -yqq
      apt-get install zip unzip libpng-dev zlib1g-dev libzip-dev -yqq
      docker-php-ext-install mysqli pdo pdo_mysql
      docker-php-ext-enable mysqli pdo pdo_mysql redis
      echo "memory_limit = $PHP_MEMORY_LIMIT" > /usr/local/etc/php/conf.d/memory_limit.ini
  script:
    - |
      php artisan migrate --force
      php artisan test

docker-build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        if [ -n "$CI_COMMIT_TAG" ]; then
          tag=":$CI_COMMIT_TAG"
        else
          tag=":$CI_COMMIT_REF_SLUG"
        fi

        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
      docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" -f .build/Dockerfile .
      docker push "$CI_REGISTRY_IMAGE${tag}"
      echo "DOCKER_IMAGE_NAME_AND_TAG=$CI_REGISTRY_IMAGE${tag}" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      exists:
        - .build/Dockerfile
    - if: '$CI_COMMIT_BRANCH == "snapshot"'
      exists:
        - .build/Dockerfile
    - if: $CI_COMMIT_TAG
      exists:
        - .build/Dockerfile

deploy-development:
  stage: deploy
  image: alpine:latest
  environment:
    name: development
  dependencies:
    - docker-build
  before_script:
    - |
      apk add openssh-client
      eval $(ssh-agent -s)
      echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      mkdir -p ~/.ssh
      chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $SSH_REMOTE_USER@$SSH_REMOTE_HOST -p $SSH_REMOTE_PORT $SSH_COMMAND_DEPLOY
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      exists:
        - .build/Dockerfile
      allow_failure: false
    - if: '$CI_COMMIT_BRANCH == "snapshot"'
      exists:
        - .build/Dockerfile
      when: manual
      allow_failure: false
    - if: $CI_COMMIT_TAG
      exists:
        - .build/Dockerfile
      when: manual
      allow_failure: false

deploy-staging:
  stage: deploy
  image: alpine:latest
  environment:
    name: staging
  dependencies:
    - docker-build
  before_script:
    - |
      apk add openssh-client
      eval $(ssh-agent -s)
      echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      mkdir -p ~/.ssh
      chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $SSH_REMOTE_USER@$SSH_REMOTE_HOST -p $SSH_REMOTE_PORT $SSH_COMMAND_DEPLOY
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      exists:
        - .build/Dockerfile
      when: manual
      allow_failure: false
    - if: '$CI_COMMIT_BRANCH == "snapshot"'
      exists:
        - .build/Dockerfile
      when: manual
      allow_failure: false
    - if: $CI_COMMIT_TAG
      exists:
        - .build/Dockerfile
      when: manual
      allow_failure: false

deploy-production:
  stage: deploy
  image: alpine:latest
  environment:
    name: production
  dependencies:
    - docker-build
  before_script:
    - |
      apk add openssh-client
      eval $(ssh-agent -s)
      echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      mkdir -p ~/.ssh
      chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $SSH_REMOTE_USER@$SSH_REMOTE_HOST -p $SSH_REMOTE_PORT $SSH_COMMAND_DEPLOY
  rules:
    - if: $CI_COMMIT_TAG
      exists:
        - .build/Dockerfile
      when: manual
      allow_failure: false
